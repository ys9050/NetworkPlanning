Program netplan will be invoked from the command-line as follows:
./netplan infile
where infile will contain a set of line-delimited data about a network connection.

Each line will contain four columns: two strings followed by two integers, all separated by whitespace. Use formatted read from file because there maybe whitespaces before the first column as well. The strings represent a company or organization; the first integer is the cost (in millions of dollars) of laying a fiber link between the two companies, thereby connecting them; the second integer is the time (in milliseconds) needed to send a packet between the two companies over the fiber link.
Here is a sample input file:
Network Point A	        Network Point B	        Cost (millions of dollars)  	Latency(milliseconds)
ibm.com	                yahoo.com           	20                          	33
yahoo.com	            ucsd.edu            	19                          	40
ucsd.edu	            ibm.com	                10	                            17
yahoo.com	            fsf.org	                5	                            10

NOTE: The header row will not be present in the input file, it is displayed here to assist with the explanation.

The program will read the input file, creating a graph of the data, and use the various algorithms to calculate six pieces of information, which will then be output (to stdout), one answer per line, in the form of an integer.

The information to be output is the following:
1) The total cost of building all of the possible network links. This is the sum of all the values in column three of your input data.
2) The total cost of building the cheapest network that will permit packets to travel from any computer to any other. This is generated by first creating a minimum spanning tree where the edges connecting links are chosen based on the cheapest edge. Then summing all the edge costs of the tree.
3)The amount of money saved by building the minimum-cost network instead of the all-possible-links network. This is the difference between your output from line two and line one.
4)The total transit time to send a packet between all pairs of computers if all possible network links were built. This requires running Dijkstra's algorithm to find the shortest path from every node in the graph to every other node. For example, ibm.com to yahoo.com, ibm.com to ucsd.edu, ibm.com to fsf.org, yahoo.com to ibm.com, yahoo.com to ucsd.edu, etc. Note, this is solved using the all-possible-links graph, not the MST from line two.
5)The total transit time it would take to send a packet between all pairs of computers in the minimum-cost network. This is the same as above, except on the graph generated from the MST from line two.
6)The increase in the "total time" required for packet travel in the cheap network (compared to having built all possible links). This is the difference between your solution to line five and line four.

For example, with the above input file, a correct program will output:
54
34
20
386
482
96

This indicates that cost of the all links network is $54 million; the cost of the cheapest network is $34 million; the cheapest network saves $20 million ($54 - $34); the total transit time if all network links were used would be the sum of sending a packet from one location to every other location, totaling 386 milliseconds; the total transit time for the cheapest network would be 482 milliseconds; and that the cheaper network would be 96 milliseconds slower than the all-links network.
